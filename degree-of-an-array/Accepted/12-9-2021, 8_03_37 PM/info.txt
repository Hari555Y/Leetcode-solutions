{"id":599377994,"lang":"java","time":"6 months, 1 week","timestamp":1639060417,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/599377994/","is_pending":"Not Pending","title":"Degree of an Array","memory":"43.5 MB","code":"class Solution {\n    public int findShortestSubArray(int[] nums) {\n        HashMap<Integer,Integer> hash = new HashMap<>();\n        int max = 0;\n        for (int i :nums){\n            hash.put(i, hash.getOrDefault(i, 0)+1);\n        }\n        ArrayList<Integer> arr = new ArrayList<>();\n        for (int p :hash.keySet()){\n            max = Math.max(max , hash.get(p));\n            \n        }\n        for (int x : hash.keySet()){\n            if (hash.get(x)==max){\n                arr.add(x);\n            }\n        }\n        int ans = 99999;\n        for (int i : arr){\n            ans = Math.min(ans , fun(i, nums));\n            \n        }\n        return ans;    \n    }\n    public static int fun(int a, int[] nums){\n        int count =nums.length;\n        for (int i=0; i<nums.length; i++){\n            if (nums[i] != a){\n                count--;\n                \n            }\n            else{\n                break;\n            }\n        }\n        for (int i = nums.length -1; i>=0; i--){\n            if (nums[i]!=a){\n                count--;\n            }\n            else{\n                break;\n            }\n        }\n        return count;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array"}