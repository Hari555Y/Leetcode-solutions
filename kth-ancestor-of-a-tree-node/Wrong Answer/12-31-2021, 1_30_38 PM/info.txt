{"id":610280670,"lang":"java","time":"5 months, 2 weeks","timestamp":1640937638,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/610280670/","is_pending":"Not Pending","title":"Kth Ancestor of a Tree Node","memory":"N/A","code":"class TreeAncestor {\n    int[][] dp;\n    int[] depth;\n    int log;\n\n    public TreeAncestor(int n, int[] parent) {\n        log = 0;\n        while((1<<(log+1))<=n){\n            log++;\n        }\n        parent[0] =0;\n        dp = new int[n][log];\n        depth = new int[n];\n        for(int v =0; v<n; v++){\n            dp[v][0] = parent[v];\n            if(v!=0){\n                depth[v] = depth[parent[v]] +1;\n            }\n        }\n        for(int j =1; j<log; j++){\n           for(int v =0; v<n; v++){\n                dp[v][j] = dp[dp[v][j-1]][j-1];\n           }\n        }  \n        \n    }\n    \n    public int getKthAncestor(int node, int k) {\n        if (depth[node]<k){\n            return -1;\n        }\n        for(int j = 0; j<log; j++){\n            if((k&(1<<j))>0){\n                node = dp[node][j];\n            }\n        }\n        return node;\n        \n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor obj = new TreeAncestor(n, parent);\n * int param_1 = obj.getKthAncestor(node,k);\n */","compare_result":"1111111100000010","title_slug":"kth-ancestor-of-a-tree-node"}