{"id":637135892,"lang":"java","time":"4 months, 1 week","timestamp":1644322244,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/637135892/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        ArrayList<Integer> arr = new ArrayList<>();\n        ArrayList<Integer> arr1 =  new ArrayList<>();\n        inorder(root1, arr);\n        inorder(root2, arr1);\n        return arr1.equals(arr);\n        \n        \n    }\n    public static void inorder(TreeNode ans, ArrayList<Integer> arr){\n        if(ans == null){\n            return;\n        }\n        if(ans.left==null && ans.right ==null){\n            arr.add(ans.val);\n        }\n        inorder(ans.left, arr);\n        inorder(ans.right , new ArrayList<Integer>(arr));\n        \n    }\n}","compare_result":"1111110111110100001000011010100001111111","title_slug":"leaf-similar-trees"}