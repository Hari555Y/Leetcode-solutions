{"id":649625425,"lang":"java","time":"3 months, 2 weeks","timestamp":1645932796,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/649625425/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        ArrayDeque<TreeNode> q= new ArrayDeque<>();\n        int ans = 0;\n        q.addFirst(root);\n        while(q.size()!=0){\n            TreeNode fir = q.getFirst();\n            while(q.size()!=0 && fir!= null && fir.val==-101){\n                q.removeFirst();\n                if(q.size()!=0)\n                    fir = q.getFirst();\n            }\n            if(q.size()>0){\n            TreeNode las = q.getLast();\n            while(q.size()!= 0 && las!=null && las.val==-101){\n                q.removeLast();\n                if(q.size()!=0)\n                    las = q.getLast();\n            }\n            }\n            int p = q.size();\n            ans = Math.max(ans, p);\n            for(int i =0; i<p; i++){\n                TreeNode x = q.poll();\n                if(x.val==-101){\n                    q.add(new TreeNode(-101));\n                    q.add(new TreeNode(-101));\n                    continue;\n                }\n                if(x.left!=null){\n                    q.add(x.left);\n                }\n                else{\n                    q.add(new TreeNode(-101));\n                }\n                if(x.right!=null){\n                    q.add(x.right);\n                }\n                else{\n                    q.add(new TreeNode(-101));\n                }\n                  \n            }\n        }\n        return ans;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000","title_slug":"maximum-width-of-binary-tree"}