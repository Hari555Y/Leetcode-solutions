{"id":600579826,"lang":"java","time":"6Â months","timestamp":1639286662,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/600579826/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"40.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root.val == p.val || root.val == q.val){\n            return root;\n        }\n        else if ((root.val> p.val && root.val <q.val)||(root.val< p.val && root.val >q.val)){\n            return root;\n        }\n        else if ((root.val> p.val && root.val >q.val)){\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        return lowestCommonAncestor(root.right , p, q);\n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}