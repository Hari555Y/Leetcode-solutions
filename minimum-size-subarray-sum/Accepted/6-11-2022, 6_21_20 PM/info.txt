{"id":719582045,"lang":"java","time":"3 days, 23 hours","timestamp":1654951880,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/719582045/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"44.7 MB","code":"class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int i =0;\n        int j =0;\n        int n = nums.length;\n        int max = Integer.MAX_VALUE;//nums.length;\n        int sum =0;\n        while(j<n){\n            sum+=nums[j];\n            if (sum>= target){\n                max = Math.min(j-i+1, max);\n                while(sum>=target && i<n){\n                    sum-=nums[i];\n                    i++;\n                    if (sum>=target){\n                        max = Math.min(j-i+1 , max);\n                    }\n                }\n            }\n            j++;\n        }\n        return max == Integer.MAX_VALUE ? 0  : max;\n        \n    }\n}","compare_result":"1111111111111111111","title_slug":"minimum-size-subarray-sum"}