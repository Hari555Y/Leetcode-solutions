{"id":685455062,"lang":"java","time":"1 month, 3 weeks","timestamp":1650638991,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/685455062/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"52 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    Stack<TreeNode> s;\n\n    public BSTIterator(TreeNode root) {\n        s = new Stack<>();\n        while(root!=null){\n            s.push(root);\n            root = root.left;\n        }\n    }\n    \n    public int next() {\n        TreeNode p = s.pop();\n        TreeNode m  = p.right;\n        while(m!=null){\n            s.push(m);\n            m = m.left;\n            \n        }\n        \n        return p.val;\n        \n        \n    }\n    \n    public boolean hasNext() {\n        return !s.isEmpty();\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}