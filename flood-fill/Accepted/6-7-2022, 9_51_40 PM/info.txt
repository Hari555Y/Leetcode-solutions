{"id":716648332,"lang":"java","time":"1Â week","timestamp":1654618900,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/716648332/","is_pending":"Not Pending","title":"Flood Fill","memory":"47.9 MB","code":"class Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n        boolean[][] visited = new boolean[image.length][image[0].length];\n        dfs(image, sr, sc, newColor , visited);\n        return image;\n        \n    }\n    public static void dfs(int[][] image, int sr, int sc, int newColor,boolean[][] visited ){\n        int rs = image[sr][sc];\n        visited[sr][sc] = true;\n        image[sr][sc] = newColor;\n        for(int i =sr-1; i<=sr+1; i++){\n            for(int  j = sc-1; j <= sc+1; j++){\n                if (Math.abs(i-sr) + Math.abs(j-sc)==1 && i>=0 && j>=0 && i<image.length && j< image[0].length && image[i][j]==rs && !visited[i][j]){\n                    dfs(image, i, j, newColor, visited);\n                    \n                }\n            }\n        }\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill"}