{"id":711527128,"lang":"java","time":"2Â weeks","timestamp":1654027712,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/711527128/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"48.1 MB","code":"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] ar = new int[2];\n        int a = first(nums, target, nums.length);\n        int b = last(nums, target ,nums.length);\n        ar[0] = a;\n        ar[1] = b;    \n        return ar;\n        \n    }\nstatic int first(int arr[],\n                 int x, int n)\n{\n  int low = 0, high = n - 1,\n      res = -1;\n  while (low <= high)\n  {\n    // Normal Binary Search Logic\n    int mid = (low + high) / 2;\n    if (arr[mid] > x)\n      high = mid - 1;\n    else if (arr[mid] < x)\n      low = mid + 1;\n \n    // If arr[mid] is same as\n    // x, we update res and\n    // move to the left half.\n    else\n    {\n      res = mid;\n      high = mid - 1;\n    }\n  }\n  return res;\n}\n \n// If x is present in arr[] then returns\n// the index of LAST occurrence of x in\n// arr[0..n-1], otherwise returns -1\nstatic int last(int arr[], int x, int n)\n{\n  int low = 0, high = n - 1,\n      res = -1;\n  while (low <= high)\n  {\n    // Normal Binary Search Logic\n    int mid = (low + high) / 2;\n    if (arr[mid] > x)\n      high = mid - 1;\n    else if (arr[mid] < x)\n      low = mid + 1;\n \n    // If arr[mid] is same as x,\n    // we update res and move to\n    // the right half.\n    else\n    {\n      res = mid;\n      low = mid + 1;\n    }\n  }\n  return res;\n}\n \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array"}