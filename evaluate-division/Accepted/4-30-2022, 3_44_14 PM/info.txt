{"id":690150297,"lang":"java","time":"1 month, 2 weeks","timestamp":1651313654,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/690150297/","is_pending":"Not Pending","title":"Evaluate Division","memory":"42.6 MB","code":"class Solution {\n    \n    \n    \n    \nprivate  Map<String, Map<String, Double>> makeGraph(List<List<String>> e, double[] values){\n        // build a graph\n        // like a -> b = values[i]\n        // and b -> a  = 1.0 / values[i];\n        Map<String, Map<String, Double>> graph = new HashMap<>();\n        String u, v;\n        \n        for(int i = 0; i < e.size(); i++){\n            u = e.get(i).get(0);\n            v = e.get(i).get(1);\n            \n            graph.putIfAbsent(u, new HashMap<>());\n            graph.get(u).put(v, values[i]);\n            \n            graph.putIfAbsent(v, new HashMap<>());\n            graph.get(v).put(u, 1/values[i]);\n            \n        }\n        return graph;\n    }\n    \n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        Map<String, Map<String, Double>> graph = makeGraph(equations, values);\n        \n        double []ans = new double[queries.size()];\n        \n        // check for every Querie\n        // store it in ans array;\n        for(int i = 0; i < queries.size(); i++){\n            ans[i] = dfs(queries.get(i).get(0) , queries.get(i).get(1) , new HashSet<>(), graph);\n        }\n        return ans;\n    }\n    \n    public double dfs(String src, String dest, Set<String> visited, Map<String, Map<String, Double>> graph){\n        // check the terminated Case\n        // if string is not present in graph return -1.0;\n        // like [a, e] or [x, x] :)\n        if(graph.containsKey(src ) == false)\n            return -1.0;\n        \n        // simply say check src and dest are equal :) then return dest \n        // store it in weight varaible;\n        //case like [a,a] also handle\n        if(graph.get(src).containsKey(dest)){\n            return graph.get(src).get(dest);\n        }\n        \n        visited.add(src);\n        \n        for(Map.Entry<String, Double> nbr : graph.get(src).entrySet()){\n            if(visited.contains(nbr.getKey()) == false){\n                double weight = dfs(nbr.getKey(), dest, visited, graph);\n                \n                // if weight is not -1.0(terminate case)\n                // then mutliply it \n                // like in querie   a -> c => 2 * 3 = 6\n                if(weight != -1.0){\n                    return nbr.getValue() * weight;\n                }\n            }\n        }\n        return -1.0;\n    }\n}","compare_result":"111111111111111111111111","title_slug":"evaluate-division"}