{"id":718782357,"lang":"java","time":"5 days, 3 hours","timestamp":1654852767,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/718782357/","is_pending":"Not Pending","title":"Positions of Large Groups","memory":"45.9 MB","code":"class Solution {\n    public List<List<Integer>> largeGroupPositions(String s) {\n        List<List<Integer>> ans = new LinkedList<>();\n        int st = 0;\n        int i =0;\n        while(st<s.length()-1){\n            if(s.charAt(st+1) == s.charAt(st)){\n                st++;\n            }\n            else{\n                System.out.println(st);\n                System.out.println(i);\n                if (st-i >=2){\n          List<Integer> ls = new LinkedList<>();\n                    ls.add(i);\n                    ls.add(st);\n                    ans.add(ls);\n                //    ls.clear();\n                }\n                st++;\n                i = st;\n               // st++;\n            }\n        }\n        if (st==s.length()-1 && i!=st){\n            if (st-i>=2){\n              List<Integer> ls = new LinkedList<>();\n                    ls.add(i);\n                    ls.add(st);\n                    ans.add(ls);   \n            }\n        }\n        return ans;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"positions-of-large-groups"}