{"id":525384742,"lang":"java","time":"11Â months","timestamp":1626767457,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/525384742/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"N/A","code":"class Solution {\n    int[] dx = {0, -1, 0, 1};\n    int[] dy = {1, 0, -1, 0};\n    public int nearestExit(char[][] maze, int[] entrance) {\n        int xcor = entrance[0];\n        int ycor = entrance[1];\n        int m =maze.length;\n        int n  = maze[0].length;\n        Queue<pair> q = new LinkedList<>();\n        q.add(new pair(xcor, ycor, 0));\n        maze[xcor][ycor] ='+';\n        while(!q.isEmpty()){\n            int siz = q.size();\n            for (int i =0; i<siz; i++){\n                pair top = q.peek();\n                q.poll();\n                for (int you =0; you<4; you++){\n                    int newx = top.x + dx[you];\n                    int newy = top.y + dx[you];\n                    if (newx >=0 && newy>=0 && newx<m && newy < n && maze[newx][newy] == '.'){\n                        if (newx==0 || newy ==0 || newx ==m-1 || newy == n-1){\n                            return top.lev+1;\n                        }\n                        q.add( new pair(newx, newy , top.lev+1));\n                        maze[newx][newy] ='+';\n                    }\n                    \n                }\n                \n            } \n        }\n        return -1;\n        \n        \n    }\n    class pair{\n        int x; int y; int lev;\n        public pair(int x, int y, int lev){\n            this.x=x;\n            this.y= y;\n            this.lev = lev;\n        }\n    }\n}\n/*class Solution {\npublic:\n    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {\n        vector<vector<int>>directions={{1,0},{0,1},{-1,0},{0,-1}};\n        int r=maze.size();\n        int c=maze[0].size();\n        queue<int>x;\n        queue<int>y;\n        x.push(entrance[0]);\n        y.push(entrance[1]);\n        maze[entrance[0]][entrance[1]]='+';\n        int count=0;\n        \n        while(!x.empty())\n        {\n            int n=x.size();\n            \n            for(int i=0;i<n;i++)\n            {\n                int l=x.front();\n                int m=y.front();\n                \n                x.pop();\n                y.pop();\n\n                for(int k=0;k<4;k++)\n                {\n                    int a=l+directions[k][0];\n                    int b=m+directions[k][1];\n                    \n                    if(a>=0 && b>=0 && a<r && b<c && maze[a][b]=='.')\n                    {\n                        if(a==0 || b==0 || a==r-1 || b==c-1)\n                            return count+1;\n                        x.push(a);\n                        y.push(b);\n                        maze[a][b]='+';\n                    }\n                }\n            }\n            \n            count++;\n        }\n        \n        return -1;\n    }\n};*/","compare_result":"10111010011000000100101001000000000010000000001011110111000000001000101111110000000000000001001010000000000000000000000000000000001000000001101011011010100010111100000001000111000100010101111001","title_slug":"nearest-exit-from-entrance-in-maze"}