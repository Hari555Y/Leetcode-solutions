{"id":600591607,"lang":"java","time":"6Â months","timestamp":1639288497,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/600591607/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"60.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if(root == null){\n            return 0;\n        }\n        return ans(root);\n    }\n    public int ans(TreeNode root){\n        if(root ==null){\n            return 0;\n            \n        }\n        else if (root.left == null&& root.right ==null){\n            return 1;\n            \n        }\n        else if ((root.left != null) && (root.right ==null)){\n            return 1 + ans(root.left);\n            \n            \n        }\n        else if((root.left == null)&& (root.right !=null)){\n            return 1 + ans(root.right);\n            \n        }\n        return 1 + Math.min(ans(root.left), ans(root.right));\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}