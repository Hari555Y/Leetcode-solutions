{"id":446947266,"lang":"java","time":"1 year, 4 months","timestamp":1611452879,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/446947266/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"93.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        return height(root);\n        \n        \n    }\n    public int height(TreeNode node){\n        if (node ==null){\n            return 0;\n        }\n        \n        else if (node.left== null && node.right ==null){\n            return 1;\n        }\n        else if (node.left== null && node.right !=null){\n            return 1 +height(node.right);\n        }\n        if (node.left!= null && node.right ==null){\n            return 1 +height(node.left);\n        }\n        else{\n            return 1+Math.min(height(node.left),height(node.right));\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}