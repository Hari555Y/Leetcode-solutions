{"id":698034003,"lang":"java","time":"1Â month","timestamp":1652354410,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/698034003/","is_pending":"Not Pending","title":"Min Stack","memory":"48.7 MB","code":"class MinStack {\n    Stack<Integer> s; \n    Stack<Integer> mi;\n\n    public MinStack() {\n        s = new Stack<>();\n         mi = new Stack<>();\n        \n    }\n    \n    public void push(int val) {\n        s.push(val);\n        if(mi.isEmpty()){\n            mi.push(val);\n        }\n        else if (val < mi.peek()){\n            mi.push(val);\n            \n        }\n        else{\n            mi.push(mi.peek());\n        }\n        \n    }\n    \n    public void pop() {\n        s.pop();\n        mi.pop();\n    }\n    \n    public int top() {\n        return s.peek();\n        \n    }\n    \n    public int getMin() {\n        return mi.peek();\n        \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack"}