{"id":681581294,"lang":"java","time":"1 month, 4 weeks","timestamp":1650126156,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/681581294/","is_pending":"Not Pending","title":"Max Area of Island","memory":"42 MB","code":"class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int ans = 0;\n        int sz = 0;\n        for(int i =0; i<m; i++){\n            for(int j =0; j<n; j++){\n                if(grid[i][j]==1)\n                    sz = dodfs(grid, i,j);\n                ans = Math.max(sz, ans);\n            } \n        }\n        return ans; \n    }\n    \n    public int dodfs(int[][] a, int row, int col){\n        if(row<0||row>=a.length||col<0||col>=a[0].length){\n            return 0;\n        }\n        if(a[row][col]==0 ){\n            return 0;\n        }\n        a[row][col]=0;\n        int size =1;\n        size+=dodfs(a, row, col+1);\n        size+=dodfs(a, row, col-1);\n        size+=dodfs(a, row+1, col);\n        size+=dodfs(a, row-1, col);\n        return size;\n        \n    }\n}","compare_resulttitle_slug":"max-area-of-island"}