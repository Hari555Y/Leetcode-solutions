{"id":599682668,"lang":"java","time":"6 months, 1 week","timestamp":1639116001,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/599682668/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"39.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        // corner case\n        if (root == null) {\n            return res;\n        }\n        // queue to store cur TreeNode and cur.left / cur. right\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        \n        while (!q.isEmpty()) {\n            // save a size for cur layer\n            int size = q.size();\n            List<Integer> temp = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                // for each layer, add value to temp list\n                TreeNode cur = q.poll();\n                temp.add(cur.val);\n                if (cur.left != null) {\n                    q.offer(cur.left);\n                }\n                if (cur.right != null) {\n                    q.offer(cur.right);\n                }\n            }\n            // after layer loop, add temp list to res\n            res.add(temp);\n        }\n        return res;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}