{"id":719568973,"lang":"java","time":"4Â days","timestamp":1654950299,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/719568973/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"N/A","code":"class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        int n = nums.length;\n        int[] pre = new int[n];\n        long sum =0;\n        HashMap<Integer,Integer> hash = new HashMap<>();\n        for(int i =0; i<n ; i++){\n            sum +=(long)nums[i];\n            pre[i] = (int)(sum%(long)k);\n            \n        }\n        hash.put(0, -1);\n        for(int i =0; i<n ; i++){\n            if (hash.containsKey(pre[i])){\n                if (hash.get(pre[i])+1 <= pre[i] ){\n                    return true;\n                    \n                }\n            }\n            else{\n                hash.put(pre[i], i);\n            }\n        }\n        return false;\n                                                \n        \n    }\n}","compare_result":"11111111100111111010001100111111010111111111111111111111111111111111111111111111111111111111110","title_slug":"continuous-subarray-sum"}