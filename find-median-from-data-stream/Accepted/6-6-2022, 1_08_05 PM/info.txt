{"id":715554371,"lang":"java","time":"1 week, 2 days","timestamp":1654501085,"status_display":"Accepted","runtime":"109 ms","url":"/submissions/detail/715554371/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"61.5 MB","code":"class MedianFinder {\n    PriorityQueue<Integer> small;\n    PriorityQueue<Integer> large;\n    public MedianFinder() {\n        small = new PriorityQueue<>(Collections.reverseOrder());\n        large = new PriorityQueue<>();\n        \n    }\n    \n    public void addNum(int num) {\n        if (small.size() ==0  || small.peek() >=num){\n            small.add(num);    \n        }\n        else{\n            large.add(num);\n        }\n        if(small.size()>large.size()+1){\n            int x = small.poll();\n            large.add(x);\n        }\n        if(small.size()+1<large.size()){\n            int x = large.poll();\n            small.add(x);\n        }\n    }\n    \n    public double findMedian() {\n        if(small.size()==large.size()){\n            return (double)(small.peek() + large.peek())/2.0;\n        }\n        else if(small.size()>large.size()){\n            return (double)small.peek();\n        }\n        else{\n            return (double)large.peek();\n        }\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream"}