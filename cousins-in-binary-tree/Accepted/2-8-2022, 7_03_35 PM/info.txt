{"id":637168641,"lang":"java","time":"4Â months","timestamp":1644327215,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/637168641/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"41.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    static int[] arr = new int[101];\n    static int[] arr1 = new int[101];\n    public boolean isCousins(TreeNode root, int x, int y) {\n        Arrays.fill(arr, -1); \n        bfs(root);\n        return (arr[x] == arr[y])&&(arr1[x] != arr1[y]);\n    }\n    public static void bfs(TreeNode ans){\n        Queue<TreeNode> q = new LinkedList<>();\n        int depth = 0;\n        q.add(ans);\n        while(q.size()>0){\n            int p = q.size();\n            for(int i=0; i<p; i++){\n                TreeNode x = q.poll();\n                arr[x.val] = depth;\n                if(x.left!=null){\n                    q.add(x.left);\n                    arr1[x.left.val] = x.val;\n                }\n                if(x.right!=null){\n                    q.add(x.right);\n                    arr1[x.right.val] = x.val;\n                }\n            }\n            depth++;\n            \n        }\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree"}