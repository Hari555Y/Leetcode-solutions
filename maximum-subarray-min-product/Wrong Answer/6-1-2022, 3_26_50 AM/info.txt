{"id":711578113,"lang":"java","time":"2Â weeks","timestamp":1654034210,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/711578113/","is_pending":"Not Pending","title":"Maximum Subarray Min-Product","memory":"N/A","code":"class Solution {\n    public int maxSumMinProduct(int[] nums) {\n        int n = nums.length;\n        ArrayList<Integer> prev = prev_smaller(nums);\n        Collections.reverse(Arrays.asList(nums));\n        ArrayList<Integer> nxt = prev_smaller(nums);\n        // for(int i : nxt){\n        //     System.out.print(i + \" \");\n        // }\n        for(int i =0; i<nxt.size(); i++){\n            int r = nxt.get(i);\n            nxt.set(i, n-1-r);\n        }\n        Collections.reverse(Arrays.asList(nums));\n        Collections.reverse(nxt);\n        // for(int i : nxt){\n        //     System.out.print(i + \" \");\n        // }\n        long ans = 0;\n        ArrayList<Long> pref_sum = new ArrayList<>();\n        pref_sum.add((long)nums[0]);\n        for(int i =1; i<n; i++){\n            pref_sum.add(pref_sum.get(i-1) + (long)nums[i]);\n        }\n        for(int i =0; i<n ; i++){\n            long sum = pref_sum.get(nxt.get(i)-1) - (prev.get(i) == -1 ? 0 : pref_sum.get(prev.get(i)));\n            ans = Math.max(ans, (long)nums[i]*(sum));\n        }\n        return (int)ans%1000000007;\n        \n        \n        \n    }\n    public static ArrayList<Integer> prev_smaller(int[] a){\n        int n = a.length;\n        ArrayList<Integer> prev = new ArrayList<>();\n        Stack<Integer> st = new Stack<>();\n        st.push(-1);\n        for(int i =0; i<n; i++){\n            while (st.peek()!= -1 && a[st.peek()] >= a[i]){\n                st.pop();\n            }\n            prev.add(st.peek());\n            st.push(i);\n        }\n        return prev;\n        \n    }\n}","compare_result":"100000000000000000000000000000000000000000","title_slug":"maximum-subarray-min-product"}