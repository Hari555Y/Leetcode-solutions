{"id":521186069,"lang":"java","time":"11 months, 1 week","timestamp":1626073671,"status_display":"Accepted","runtime":"858 ms","url":"/submissions/detail/521186069/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"104.1 MB","code":"class Solution {\n    int parent[],rank[];\n    class Pair{\n        int x,y,z;\n        Pair(int x,int y,int z)\n        {\n            this.x=x;\n            this.y=y;\n            this.z=z;\n        }\n    }\n    public int minCostConnectPoints(int[][] points) {\n        int n=points.length;\n        rank=new int[n];\n        parent=new int[n];\n     //   Arrays.fill(rank,0);\n        for(int i=0;i<n;i++){\n            parent[i]=i;\n            rank[i]=0;\n            \n        }\n        Pair arr[]=new Pair[(n*(n-1))/2];\n        int k=0;\n        for(int i=0;i<points.length;i++)\n        {\n            for(int j=i+1;j<points.length;j++)\n            {\n                int dis=Math.abs(points[j][0]-points[i][0])+Math.abs(points[j][1]-points[i][1]);\n                arr[k++]=new Pair(i,j,dis);\n            }\n        }\n        Arrays.sort(arr,(a,b)->(a.z-b.z));\n        int res=0;\n        for(int i=0;i<arr.length;i++)\n        {\n            Pair p=arr[i];\n            int u=find(p.x);\n            int v=find(p.y);\n            if(u!=v)\n            {\n                res+=p.z;\n                union(u,v);\n                //s++;\n            }\n        }\n        return res;\n    }\n    public int find(int x)\n    {\n        if(parent[x]==x)\n            return x;\n        return parent[x]=find(parent[x]);\n    }\n    public void union(int x,int y)\n    {\n        if(rank[x]<rank[y])\n            parent[x]=y;\n        else if(rank[x]>rank[y])\n            parent[y]=x;\n        else\n        {\n            parent[x]=y;\n            rank[y]++;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points"}