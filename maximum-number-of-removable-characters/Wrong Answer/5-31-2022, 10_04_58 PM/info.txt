{"id":711390290,"lang":"java","time":"2Â weeks","timestamp":1654014898,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/711390290/","is_pending":"Not Pending","title":"Maximum Number of Removable Characters","memory":"N/A","code":"class Solution {\n    public int maximumRemovals(String s, String p, int[] removable) {\n        int k = 0;\n        int n = removable.length;\n        int c =0;\n        for(int i =0; i<n; i++){\n            int rs = s.length();\n            s = s.substring(0, removable[i]) + s.substring(removable[i] +1);\n            c++;\n            System.out.println(s);\n            if (cuntains(s, p)){\n                k = Math.max(c, k);\n            }\n            else{\n                break;\n            }\n            \n        }\n        return k;\n    }\n    public static boolean cuntains(String s, String p){\n        int i =0; int j =0;\n        while(i<p.length() && j<s.length()){\n            char m  = p.charAt(i);\n            char g  = s.charAt(j);\n            if (m==g){\n                i++;\n               // j++;\n            }\n            j++;\n            \n        }\n        return  i == p.length() ? true :false;\n        \n    }\n    \n}","compare_result":"1110001001000010000000000000000000000000000000000000000000111111000","title_slug":"maximum-number-of-removable-characters"}