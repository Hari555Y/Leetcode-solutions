{"id":719513662,"lang":"java","time":"4 days, 1 hour","timestamp":1654943562,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/719513662/","is_pending":"Not Pending","title":"Random Point in Non-overlapping Rectangles","memory":"N/A","code":"class Solution {\n    int[] pre;\n    int[][] rec;\n    public Solution(int[][] rects) {\n        int m = rects.length;\n        int n = rects[0].length;\n        rec = new int[m][n];\n        pre = new int[m];\n        pre[0] = (rects[0][2]-rects[0][0] +1)*(rects[0][3]-rects[0][1]+1);\n        for(int i =1; i<m; i++){\n            pre[i] = pre[i-1] + (rects[i-1][2]-rects[i-1][0] +1)*(rects[i-1][3]-rects[i-1][1]+1);\n            \n        }    \n    }\n    \n    public int[] pick() {\n        int[] ans = new int[2];\n        int tar  = (int)(Math.random()*pre[pre.length-1]);\n        int ind = bin_sear(pre, tar)+1;\n        int tepx = rec[ind][0] + (int)(tar%(rec[ind][2]-rec[ind][0]+1));\n        int tepy = rec[ind][1] + (int)(tar%(rec[ind][3]-rec[ind][1]+1));\n        ans[0] = tepx;\n        ans[1] = tepy;\n        return ans;\n        \n        \n        \n    }\n   public static int bin_sear(int[] a , int trget){\n        int s = 0;\n        int e = a.length-1;\n        int res = -1;\n        while(s<e){\n            int mid = s + (e-s)/2;\n            if (a[mid]<=trget){\n                res = mid;\n                s = mid+1;\n            }\n            else if (a[mid]>trget){\n                e = mid;\n                \n            }\n        }\n        return res;\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(rects);\n * int[] param_1 = obj.pick();\n */\n\n// class Solution {\n//     int[] pre;\n//     public Solution(int[] w) {\n//         int n = w.length;\n//         pre = new int[n];\n//         pre[0] = w[0];\n//         for(int i =1; i<n; i++){\n//             pre[i] = w[i] + pre[i-1];\n            \n//         }\n        \n        \n//     }\n    \n//     public int pickIndex() {\n//         int tar = (int)(Math.random()*pre[pre.length-1]);\n//         return bin_sear(pre, tar) +1;\n        \n        \n        \n//     }\n    // [1,2, 5, 7] \n    // 3\n    \n//     public static int bin_sear(int[] a , int trget){\n//         int s = 0;\n//         int e = a.length-1;\n//         int res = -1;\n//         while(s<e){\n//             int mid = s + (e-s)/2;\n//             if (a[mid]<=trget){\n//                 res = mid;\n//                 s = mid+1;\n//             }\n//             else if (a[mid]>trget){\n//                 e = mid;\n                \n//             }\n//         }\n//         return res;\n//     }\n//}\n","compare_result":"10000000000000000000000000000000000","title_slug":"random-point-in-non-overlapping-rectangles"}