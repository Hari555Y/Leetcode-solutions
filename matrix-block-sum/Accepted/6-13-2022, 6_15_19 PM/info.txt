{"id":721217278,"lang":"java","time":"1 day, 23 hours","timestamp":1655124319,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/721217278/","is_pending":"Not Pending","title":"Matrix Block Sum","memory":"49.3 MB","code":"class Solution {\n    public int[][] matrixBlockSum(int[][] mat, int k) {\n        int ROWS = mat.length;\n        int COLS = mat[0].length;\n        int [][] dp = new int [ROWS + 1][COLS + 1];\n        int [][] res = new int [ROWS][COLS];\n        for (int i = 0; i < ROWS; i++) {\n            for (int j = 0; j < COLS; j++) {\n                dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] + mat[i][j] - dp[i][j];\n            }\n        }\n        for (int i = 0; i < ROWS; i++) {\n            for (int j = 0; j < COLS; j++) {\n                int r1 = Math.max(0, i - k);\n                int c1 = Math.max(0, j - k);\n                int r2 = Math.min(ROWS - 1, i + k);\n                int c2 = Math.min(COLS - 1, j + k);\n                res[i][j] = calculateSum(dp, r1, c1, r2, c2);\n            }\n        }\n        return res;\n    }\n    \n    public int calculateSum(int [][] dp, int r1, int c1, int r2, int c2) {\n        return dp[r2 + 1][c2 + 1] - dp[r1][c2 + 1] - dp[r2 + 1][c1] + dp[r1][c1];\n    }\n    \n}","compare_result":"111111111111","title_slug":"matrix-block-sum"}