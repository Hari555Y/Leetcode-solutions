{"id":711532574,"lang":"java","time":"2Â weeks","timestamp":1654028333,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/711532574/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> ans = new ArrayList<>();\n        lvl mx_level = new lvl();\n        rc(ans, mx_level, 1 , root);\n        return ans;\n    }\n    \n    public static void rc(List<Integer> ans, lvl mx_level, int level, TreeNode root){\n        if(root == null){\n            return;\n        }\n        if (mx_level.mx_lvl <level){\n            ans.add(root.val);\n            mx_level.mx_lvl = level;\n        }\n        rc(ans, mx_level, level+1, root.right);\n        rc(ans, mx_level , level +1 , root.left);\n        \n    }\n}\n\nclass lvl{\n    int mx_lvl;\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}