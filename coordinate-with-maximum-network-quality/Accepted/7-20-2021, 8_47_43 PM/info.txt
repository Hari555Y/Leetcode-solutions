{"id":525541273,"lang":"java","time":"10 months, 4 weeks","timestamp":1626794263,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/525541273/","is_pending":"Not Pending","title":"Coordinate With Maximum Network Quality","memory":"39.9 MB","code":"class Solution {\n    public int[] bestCoordinate(int[][] towers, int radius) {\n        int minX = Integer.MAX_VALUE, maxX = Integer.MIN_VALUE, minY = Integer.MAX_VALUE, maxY = Integer.MIN_VALUE;\n        for(int[] tower : towers) {\n            minX = Math.min(minX, tower[0]);\n            maxX = Math.max(maxX, tower[0]);\n            minY = Math.min(minY, tower[1]);\n            maxY = Math.max(maxY, tower[1]);\n        }\n        \n        int ansX = 0, ansY = 0, maxQuality = 0;\n        for(int i = minX; i <= maxX; i++) {\n            for(int j = minY; j <= maxY; j++) {\n                int q = quality(towers, new int[]{i, j}, radius);\n                if(q > maxQuality) {\n                    maxQuality = q;\n                    ansX = i;\n                    ansY = j;\n                }\n            }\n        }\n        \n        return new int[]{ansX, ansY};\n    }\n    \n    private int quality(int[][] towers, int[] p, int radius) {\n        int totalQuality = 0;\n        for(int[] tower : towers) {\n            totalQuality += quality2(tower, p, radius);\n        }\n        \n        return totalQuality;\n    }\n    \n    private int quality2(int[] tower, int[] p, int radius) {\n        double d = Math.sqrt((p[0] - tower[0]) * (p[0] - tower[0]) + (p[1] - tower[1]) * (p[1] - tower[1]));\n        if(d > radius) return 0;\n        \n        return (int)(tower[2] / (1 + d));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coordinate-with-maximum-network-quality"}