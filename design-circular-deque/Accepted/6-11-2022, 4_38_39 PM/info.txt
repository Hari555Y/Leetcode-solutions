{"id":719531515,"lang":"java","time":"4 days, 1 hour","timestamp":1654945719,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/719531515/","is_pending":"Not Pending","title":"Design Circular Deque","memory":"48.8 MB","code":"class MyCircularDeque {\n    \n    node head;\n    node tail;\n    int siz;\n    int cap;\n    public MyCircularDeque(int k) {\n        head = new node(-1);\n        tail = new node(-1);\n        cap = k;\n        siz =0;\n        head.next = tail;\n        tail.prev = head;\n        tail.next = null;\n        head.prev = null;\n        \n        \n    }\n    \n    public boolean insertFront(int value) {\n        if(isFull()){\n            return false;\n        }\n        node added = new node(value);\n        node roop = head.next;\n        head.next = added;\n        added.next = roop;\n        roop.prev = added;\n        added.prev = head;\n        siz++;\n        return true;\n        \n    }\n    \n    public boolean insertLast(int value) {\n        if(isFull()){\n            return false;\n        }\n        node added = new node(value);\n        node roop = tail.prev;\n        tail.prev = added;\n        added.prev = roop;\n        roop.next = added;\n        added.next = tail;\n        siz++;\n        return true;\n        \n       // siz++;\n      //  return true;\n        \n    }\n    \n    public boolean deleteFront() {\n        if (isEmpty()){\n            return false;\n        }\n    //    node topo = head;\n        head.next = head.next.next;\n        head.next.prev = head;\n        siz--;\n        return true;\n        \n    }\n    \n    public boolean deleteLast() {\n        if (isEmpty()){\n            return false;\n        }\n        tail.prev = tail.prev.prev;\n        tail.prev.next = tail;      \n        siz--;\n        return true;\n        \n        \n        \n    }\n    \n    public int getFront() {\n        if (isEmpty()){\n            return -1;\n        }\n        return head.next.val;\n        \n    }\n    \n    public int getRear() {\n        if (isEmpty()){\n            return -1;\n        }\n        return tail.prev.val;\n    }\n    \n    public boolean isEmpty() {\n        if (siz==0){\n            return true;\n        }\n        return false;\n        \n    }\n    \n    public boolean isFull() {\n        return cap==siz;\n        \n    }\n}\nclass node{\n    int val;\n    node prev;\n    node next;\n    public node(int val){\n        this.val = val;\n        this.prev = null;\n        this.next = null;\n        \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque obj = new MyCircularDeque(k);\n * boolean param_1 = obj.insertFront(value);\n * boolean param_2 = obj.insertLast(value);\n * boolean param_3 = obj.deleteFront();\n * boolean param_4 = obj.deleteLast();\n * int param_5 = obj.getFront();\n * int param_6 = obj.getRear();\n * boolean param_7 = obj.isEmpty();\n * boolean param_8 = obj.isFull();\n */","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"design-circular-deque"}