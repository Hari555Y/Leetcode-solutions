{"id":721178559,"lang":"java","time":"2Â days","timestamp":1655119844,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/721178559/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"class Solution {\n    int[][] dp;\n    public int[][] updateMatrix(int[][] mat) {\n        int m = mat.length;\n        int n = mat[0].length;\n        dp = new int[m][n];\n        for(int i =0 ; i<m; i++){\n            for(int j  =0 ; j<n ; j++){\n                if(mat[i][j]==0){\n                    dp[i][j] =0;\n                }\n                else{\n                    dp[i][j] =999999;\n                }\n            }\n        }\n        for(int i =0; i <m ; i++){\n            for(int j = 0 ; j<n ; j++){\n                if(mat[i][j]!=0){\n                    bfs(i , j, i , j);\n                    \n                }\n            }\n        }\n        return dp;\n        \n        \n    }\n    public void bfs(int a , int b, int i , int j){\n        Queue<Integer> q = new LinkedList<>();\n        q.add(a);\n        q.add(b);\n        int count =0;\n        while(!q.isEmpty()){\n            while(!q.isEmpty()){\n                int m= q.poll();\n                int n= q.poll();\n                if (dp[m][n]!=999999)\n                    dp[i][j] = Math.min(count + dp[m][n] , dp[i][j]);\n            }\n            if (dp[i][j]==999999){\n                if (a+1<dp.length){\n                    q.add(a+1);\n                    q.add(b);\n                }\n                if(b+1 < dp[0].length){\n                    q.add(a);\n                    q.add(b+1);\n                }\n                if (a-1>=0){\n                    q.add(a-1);\n                    q.add(b);\n                }\n                if (b-1>=0){\n                    q.add(a);\n                    q.add(b-1);\n                }\n            }\n            count++;\n            \n        }\n        \n        \n    }\n}","compare_result":"11111111111000000000000000000000000000000000000000","title_slug":"01-matrix"}