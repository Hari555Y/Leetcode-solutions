{"id":721187968,"lang":"java","time":"2Â days","timestamp":1655120954,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/721187968/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"class Solution {\n    int[][] dp;\n    public int[][] updateMatrix(int[][] mat) {\n        int m = mat.length;\n        int n = mat[0].length;\n        dp = new int[m][n];\n        for(int i =0 ; i<m; i++){\n            for(int j  =0 ; j<n ; j++){\n                if(mat[i][j]==0){\n                    dp[i][j] =0;\n                }\n                else{\n                    dp[i][j] =999999;\n                }\n            }\n        }\n        bfs(mat);\n        return dp;\n        \n        \n    }\n    public void bfs(int[][] mat){\n        Queue<Integer> q = new LinkedList<>();\n        for(int i =0; i<mat.length; i++){\n            for(int j =0; j<mat[0].length; j++){\n                if(mat[i][j]==0){\n                    q.add(i);\n                    q.add(j);\n                }\n            }\n        }\n        while(!q.isEmpty()){\n            int m= q.poll();\n            int n= q.poll();\n            for(int i =-1; i<=1; i++){\n                for(int j = -1; j<=1; j++){\n                    if(m+i >=0 && m+i <mat.length && n+j>=0 &&\n                      n+j <mat[0].length){\n                        if(dp[m+i][n+j] >dp[m][n] +1){\n                            dp[m+i][n+j]= dp[m][n]+1;\n                            q.add(m+i);\n                            q.add(n+j);\n                        }\n                    }\n                }\n            }\n            \n            \n            \n        }\n        \n        \n    }\n}","compare_result":"10111110100000000000000000000000000001100111100011","title_slug":"01-matrix"}