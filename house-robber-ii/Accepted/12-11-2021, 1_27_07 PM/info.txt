{"id":600137356,"lang":"java","time":"6Â months","timestamp":1639209427,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/600137356/","is_pending":"Not Pending","title":"House Robber II","memory":"36.4 MB","code":"class Solution {\n    public int rob(int[] nums) {\n        int l = nums.length;\n        if (l==1){\n            return nums[0];\n        }\n        if(l==2){\n            return Math.max(nums[0], nums[1]);\n        }\n        int[] ar1 = new int[l-1];\n        int[] ar2 = new int[l-1];\n        for (int i =0; i<l-1; i++){\n            ar1[i] = nums[i];\n        }\n        for (int j =1; j<l; j++){\n            ar2[j-1] = nums[j];\n        }\n        return Math.max(robbing(ar1), robbing(ar2));\n        \n    }\n    public static int robbing(int[] nums) {\n        if (nums.length==1){\n            return nums[0];\n        }\n        else if (nums.length==2){\n            return Math.max(nums[0], nums[1]);\n        }\n        int[] dp = new int[nums.length];\n        dp[0]=nums[0];\n        dp[1] = Math.max(nums[1], nums[0]);\n        for (int i=2; i<nums.length; i++){\n            dp[i] = Math.max(dp[i-2] + nums[i], dp[i-1]);\n            \n        }\n        return dp[nums.length-1];\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-ii"}