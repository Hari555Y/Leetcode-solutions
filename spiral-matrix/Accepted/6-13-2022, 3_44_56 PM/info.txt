{"id":721140902,"lang":"java","time":"2 days, 2 hours","timestamp":1655115296,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/721140902/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"41.8 MB","code":"class Solution {\n    public List<Integer> spiralOrder(int[][] A) {\n        List<Integer> ans = new ArrayList<Integer>();\n        int rows = 0; int cols = 0; int rowe= A.length -1; int cole=A[0].length-1;\n       // int count =1;\n        while(rows<=rowe&&cols<=cole){\n            for (int i =cols; i<=cole; i++){\n                //ans.get(rows).set(i,count++);\n                ans.add(A[rows][i]);\n            }\n            rows++;\n            for (int j =rows; j<=rowe; j++){\n                //ans.get(cole).set(j, count++);\n                //ans.get(j).set(cole,count++);\n                ans.add(A[j][cole]);\n            }\n            cole--;\n           if(cols<=cole && rows <=rowe){\n                if(cols<=cole){\n                    for (int k = cole; k>=cols; k--){\n                       // ans.get(rowe).set(k, count++);\n                        //ans.get(rowe).set(k,count++);\n                        ans.add(A[rowe][k]);\n                    }\n                }\n                rowe--;\n                if(rowe>=rows){\n                    for (int r = rowe; r>=rows; r--){\n                       // ans.get(cols).set(r, count++);\n                       //ans.get(r).set(cols,count++);\n                       ans.add(A[r][cols]);\n                    }\n                }\n                cols++;\n                \n            }\n        }\n        return ans;\n        \n    }\n}","compare_result":"11111111111111111111111","title_slug":"spiral-matrix"}