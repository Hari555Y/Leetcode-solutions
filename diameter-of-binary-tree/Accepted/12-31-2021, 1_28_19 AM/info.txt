{"id":609964467,"lang":"java","time":"5 months, 2 weeks","timestamp":1640894299,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/609964467/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"41.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int diameterOfBinaryTree(TreeNode root) {\n        return dfs(root).a;\n        \n        \n    }\n    public static pair dfs(TreeNode root){\n        if (root ==null){\n            return new pair(0,0);\n        }\n        pair x = dfs(root.left);\n        pair y = dfs(root.right);\n        int diameter = Math.max(x.a , Math.max(y.a, x.b+y.b));\n        return new pair(diameter, Math.max(x.b , y.b)+1);\n        \n    }\n}\nclass pair{\n    int a; int b;\n    public pair(int a, int b){\n        this.a = a;\n        this.b = b;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree"}